#!/usr/bin/env python3

import glob
import os
import sys
import shutil
import argparse

from shutil import copyfile
from pathlib import Path
from zipfile import ZipFile
import yaml

REPO_ROOT = Path(__file__).resolve().parent.parent

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'logs_dir',
        help="path to a folder containing all the logs of all matches" ,
        type=Path,
    )
    parser.add_argument(
        'output_dir',
        help="path to create per_team directory of all logs per team",
        type=Path,
    )
    parser.add_argument(
        'league_yaml',
        help="path to the comp state 'league.yaml' file",
        type=Path,
    )
    return parser.parse_args()

def main(args: argparse.Namespace) -> None:
    team_matches = dict() # Team : (match, corner)
    with open(args.league_yaml) as league_file:
        matches = yaml.load(league_file)["matches"]
        for i, match in matches.items():
            match = match["main"]
            for c, team in enumerate(match):
                if team in team_matches:
                    team_matches[team].append((i,c))
                else:
                    team_matches[team] = [(i,c)]

    for team, matches  in team_matches.items():
        for (number, corner) in matches:
            number = str(number).zfill(2)
            f = glob.glob(f"{args.logs_dir}/**/log-zone-{corner}-match-{number}*", recursive=True)
            print(f"{team}:  M{number}: {f}")
            if f:
                out_dir = Path(f"{args.output_dir}/per_team/{team}/match-{number}")
                os.makedirs(out_dir)
                copyfile(f[0],f"{out_dir}/log-zone-{corner}-match-{number}.txt")

if __name__ == "__main__":
    main(parse_args())
